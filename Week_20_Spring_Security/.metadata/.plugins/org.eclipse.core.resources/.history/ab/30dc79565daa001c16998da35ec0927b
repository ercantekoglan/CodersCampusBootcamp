package com.coderscampus.security;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
public class SecurityConfiguration extends WebSecurityConfigurerAdapter {
  
  @Autowired
  private PasswordEncoder passwordEncoder;
  @Autowired
  private UserDetailsService userDetailsService;
  
  @Bean
  public PasswordEncoder passwordEncoder () {
    return new BCryptPasswordEncoder();
  }
  
  @Override
  protected void configure(AuthenticationManagerBuilder auth) throws Exception {
    auth
      .userDetailsService(userDetailsService)
      .passwordEncoder(passwordEncoder);
  }
  
  @Override
  protected void configure(HttpSecurity http) throws Exception {
    http
      .csrf().disable()
      .authorizeRequests()
        .antMatchers("/admin/**").hasAnyRole("ADMIN")
        .anyRequest().hasAnyRole("USER").and()
      .formLogin()
        .loginPage("/login")
        .defaultSuccessUrl("/dashboard")
        .permitAll();
  }
}





















//
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.context.annotation.Bean;
//import org.springframework.context.annotation.Configuration;
//import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
//import org.springframework.security.config.annotation.web.builders.HttpSecurity;
//import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
//import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
//import org.springframework.security.crypto.password.PasswordEncoder;
//import org.springframework.security.core.userdetails.UserDetailsService;
//
//
//@Configuration
//public class SecurityConfiguration extends WebSecurityConfigurerAdapter {
//  
//  @Autowired
//  private PasswordEncoder passwordEncoder; // spring interface
//  @Autowired
//  private UserDetailsService userDetailsService; //spring interface
//  
//  // The UserDetailsService is a core interface in Spring Security framework, 
//  // which is used to retrieve the user's authentication and authorization information. 
//  // This interface has only one method named loadUserByUsername() which we can implement to 
//  // feed the customer information to the Spring security API.
//  
//  @Bean
//  public PasswordEncoder passwordEncoder () {
//    return new BCryptPasswordEncoder();
//  }
//  
//  //spring.main.allow-circular-references=true
//
////  @Override
////  protected void configure(AuthenticationManagerBuilder auth) throws Exception {
////    auth
////      .inMemoryAuthentication()
////      .passwordEncoder(passwordEncoder)
////      .withUser("trevor@craftycodr.com")
////      .password("$2a$10$MSq0y.8rlxOXlOd5ft0f3uJ/aeL4N/v3eyQIcJQ7WANWO.14ywaXi")
////      .roles("USER", "ADMIN");
////  }
//  
//  @Override
//  protected void configure(AuthenticationManagerBuilder auth) throws Exception {
//    auth
//      .userDetailsService(userDetailsService)
//      .passwordEncoder(passwordEncoder);
//
//  }
//  
//  @Override
//  protected void configure(HttpSecurity http) throws Exception {
//    http
//      .csrf().disable()
//      .authorizeRequests()
//        .antMatchers("/admin/**").hasAnyRole("ADMIN")
//        .anyRequest().hasAnyRole("USER").and()
//      .formLogin()
//        .loginPage("/login") //kendi login page imizi olusturuyoruz
//        .defaultSuccessUrl("/dashboard")
//        .permitAll();
//  }
//}